# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SigFunctionDockWidget
                                 A QGIS plugin
 SIGfunction uses a mathematical expression to transform the natural scale that measures the state of a territory attribute to a value scale between zero and one, which represents a gradient from an anti-ideal state to an ideal one according to its contribution to compliance. of the objective or goal (0 representing the most undesirable condition and 1 the most desirable

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Víctor Hernández Díaz / UNAM-LANCIS-APC
        email                : victorhdzgeo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsMapLayerProxyModel,QgsRasterBandStats
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtGui import QPixmap,QImage, QBrush
from qgis.PyQt.QtWidgets import QAction, QGraphicsView, QGraphicsScene, QGraphicsPixmapItem

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sigfunction_dockwidget_base.ui'))


class SigFunctionDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(SigFunctionDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.r_layer.setFilters(QgsMapLayerProxyModel.RasterLayer) #Muestra solo las capas raster en la lista
        self.r_layer.layerChanged.connect(self.min_max)  #Reñal de capa cambiada
        self.r_layer.layerChanged.connect(self.data_fv)
        self.selectFV.currentIndexChanged.connect(self.data_fv)
        status = False
        self.label_centro.setVisible(status)
        self.v_centro.setVisible(status)
        self.v_centro_ant.setVisible(status)

        self.label_sat.setVisible(status)
        self.v_sat.setVisible(status)
        self.v_sat_ant.setVisible(status)

        self.label_opt.setVisible(status)
        self.v_opt.setVisible(status)
        self.v_opt_ant.setVisible(status)

        self.label_amp.setVisible(status)
        self.v_amp.setVisible(status)
        self.v_amp_ant.setVisible(status)
        

    def min_max(self):
        rlayer = self.r_layer.currentLayer()
        extent = rlayer.extent()
        provider = rlayer.dataProvider()
        stats = provider.bandStatistics(1,
                                        QgsRasterBandStats.All,
                                        extent,
                                        0)

        value_min = stats.minimumValue
        value_max = stats.maximumValue
        self.v_min.setText(str(round(value_min,3)))
        self.v_max.setText(str(round(value_max,3)))
        return [value_min,value_max]

    def data_fv(self):
        xmin,xmax= self.min_max()
        xmean = (xmax+xmin)/2
        if self.selectFV.currentText()=='Logística':
            status = True
            self.v_centro.setValue(round(xmean,1))
            self.label_centro.setVisible(status)
            self.v_centro.setVisible(status)
            self.v_centro_ant.setVisible(status)
            self.label_sat.setVisible(status)
            self.v_sat.setVisible(status)
            self.v_sat_ant.setVisible(status)
            status_ = False
            self.label_opt.setVisible(status_)
            self.v_opt.setVisible(status_)
            self.v_opt_ant.setVisible(status_)
            self.label_amp.setVisible(status_)
            self.v_amp.setVisible(status_)
            self.v_amp_ant.setVisible(status_)

        elif self.selectFV.currentText()=='Cóncava' or self.selectFV.currentText()=='Convexa':
            status_ = False
            self.label_centro.setVisible(status_)
            self.v_centro.setVisible(status_)
            self.v_centro_ant.setVisible(status_)
            self.label_opt.setVisible(status_)
            self.v_opt.setVisible(status_)
            self.v_opt_ant.setVisible(status_)
            
            self.label_amp.setVisible(status_)
            self.v_amp.setVisible(status_)
            self.v_amp_ant.setVisible(status_)
            status = True
            self.label_sat.setVisible(status)
            self.v_sat.setVisible(status)
            self.v_sat_ant.setVisible(status)
        elif self.selectFV.currentText()=='Campana': 
            status = False
            self.v_centro.setValue(round(xmean,1))
            self.label_centro.setVisible(status)
            self.v_centro.setVisible(status)
            self.v_centro_ant.setVisible(status)
            self.label_sat.setVisible(status)
            self.v_sat.setVisible(status)
            self.v_sat_ant.setVisible(status)
            status_ =True
            self.v_opt.setValue(round(xmean,1))
            self.label_opt.setVisible(status_)
            self.v_opt.setVisible(status_)
            self.v_opt_ant.setVisible(status_)
        
            self.label_amp.setVisible(status_)
            self.v_amp.setVisible(status_)
            self.v_amp_ant.setVisible(status_)
        else:
            status = False
            self.v_centro.setValue(round(xmean,1))
            self.label_centro.setVisible(status)
            self.v_centro.setVisible(status)
            self.v_centro_ant.setVisible(status)
            self.label_sat.setVisible(status)
            self.v_sat.setVisible(status)
            self.v_sat_ant.setVisible(status)
        
            self.label_opt.setVisible(status)
            self.v_opt.setVisible(status)
            self.v_opt_ant.setVisible(status)
        
            self.label_amp.setVisible(status)
            self.v_amp.setVisible(status)
            self.v_amp_ant.setVisible(status)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
